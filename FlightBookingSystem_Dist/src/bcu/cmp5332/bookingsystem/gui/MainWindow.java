package bcu.cmp5332.bookingsystem.gui;

import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;
import java.io.IOException;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Dimension;
import java.awt.Color;
import java.awt.Font;
import java.awt.Insets;

import bcu.cmp5332.bookingsystem.data.FlightBookingSystemData;
import bcu.cmp5332.bookingsystem.model.*;
import bcu.cmp5332.bookingsystem.main.FlightBookingSystemException;

/**
 * The MainWindow class provides the main graphical user interface for the flight booking management system.
 * It allows the user to view, add, update, and delete flights, bookings, and customers.
 * This class implements the ActionListener interface to handle menu item selections.
 *
 * @author Ashlesha Shrestha
 * @author Nishan Shrestha
 */
public class MainWindow extends JFrame implements ActionListener {
    private JMenuBar menuBar;
    private FlightBookingSystem fbs;

    /**
     * Constructs a new MainWindow object with a reference to the flight booking system.
     * @param fbs The FlightBookingSystem object representing the flight booking system.
     */
    public MainWindow(FlightBookingSystem fbs) {
        this.fbs = fbs;
        initialize();
        displayFlights(flight -> flight.getStatus() == 1 && flight.getDepartureDate().isAfter(LocalDate.now()));
    }

    /**
     * Initializes the contents of the frame, setting up the layout and components.
     */
    private void initialize() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ignored) {
        }

        setTitle("Flight Booking Management System");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        getContentPane().setBackground(new Color(240, 248, 255)); // Set background color to AliceBlue
        setupMenu();
        setupExitButton();
        setVisible(true);
    }

    /**
     * Sets up the menu bar with menus and menu items.
     */
    private void setupMenu() {
        menuBar = new JMenuBar();
        setJMenuBar(menuBar);

        JMenu flightsMenu = createMenu("Flights", new String[] {
                "View all flights",
                "View future flights",
                "Add Flight",
                "Delete Flight",
                "Show Passengers",
                "View deleted flights"
        }, this);
        JMenu bookingsMenu = createMenu("Bookings", new String[] { "Issue Booking",
                "Update Booking",
                "Cancel Booking",
                "View Bookings"
        }, this);
        JMenu customersMenu = createMenu("Customers",
                new String[] {
                        "View Customers",
                        "Add Customer",
                        "Delete Customer",
                        "View deleted customers"
                }, this);

        menuBar.add(flightsMenu);
        menuBar.add(bookingsMenu);
        menuBar.add(customersMenu);
    }

    /**
     * Creates a menu with the specified title and menu items.
     * @param title The title of the menu.
     * @param items The array of menu item titles.
     * @param listener The ActionListener to handle menu item selections.
     * @return The created JMenu object.
     */
    private JMenu createMenu(String title, String[] items, ActionListener listener) {
        JMenu menu = new JMenu(title);
        menu.setFont(new Font("Arial", Font.BOLD, 14));
        menu.setForeground(Color.BLUE);
        for (String item : items) {
            JMenuItem menuItem = new JMenuItem(item);
            menuItem.setFont(new Font("Arial", Font.PLAIN, 14));
            menuItem.setBackground(new Color(70, 130, 180));
            menuItem.setMargin(new Insets(5, 5, 5, 5));
            menuItem.addActionListener(listener);
            menu.add(menuItem);
        }
        return menu;
    }

    /**
     * Sets up the exit button in the menu bar.
     */
    private void setupExitButton() {
        JButton exitButton = new JButton("Exit");
        exitButton.setFont(new Font("Arial", Font.BOLD, 14));
        exitButton.setForeground(Color.RED);
        exitButton.setMargin(new Insets(5, 10, 5, 10));
        exitButton.addActionListener(e -> saveAndExit());
        menuBar.add(Box.createHorizontalGlue());
        menuBar.add(exitButton);
    }

    /**
     * Handles action events generated by menu items.
     * @param ae The ActionEvent object representing the action event.
     */
    @Override
    public void actionPerformed(ActionEvent ae) {
        String command = ((JMenuItem) ae.getSource()).getText();
        switch (command) {
            case "Exit":
                saveAndExit();
                break;
            case "View all flights":
                displayFlights(flight -> flight.getStatus() == 1);
                break;
            case "View future flights":
                displayFlights(flight -> flight.getStatus() == 1 && flight.getDepartureDate().isAfter(LocalDate.now()));
                break;
            case "Add Flight":
                new AddFlightWindow(this);
                break;
            case "Delete Flight":
                new DeleteFlightWindow(this);
                break;
            case "Issue Booking":
                new IssueBookingWindow(this);
                break;
            case "Update Booking":
                new UpdateFlightWindow(this, fbs);
                break;
            case "Cancel Booking":
                new CancelBookingWindow(this, fbs);
                break;
            case "View Customers":
                displayCustomers();
                break;
            case "Add Customer":
                new AddCustomerWindow(this);
                break;
            case "Delete Customer":
                new DeleteCustomerWindow(this);
                break;
            case "Show Passengers":
                showPassengersForSelectedFlight();
                break;
            case "View Bookings":
                displayBookings();
                break;
            case "View deleted flights":
                displayDeletedFlights();
                break;
            case "View deleted customers":
                displayDeletedCustomers();
                break;
        }
    }

    /**
     * Saves the flight booking system data and exits the application.
     */
    private void saveAndExit() {
        try {
            FlightBookingSystemData.store(fbs);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error saving data", "Error", JOptionPane.ERROR_MESSAGE);
        }
        System.exit(0);
    }

    /**
     * Displays the flights that match the specified filter.
     * @param filter The filter to apply to the flights.
     */
    private void displayFlights(java.util.function.Predicate<Flight> filter) {
        List<Flight> flightsList = fbs.getFlights().stream().filter(filter).collect(Collectors.toList());

        String[] columns = { "ID", "Flight No", "Origin", "Destination", "Departure Date", "Capacity",
                "Available Seats", "Price", "Calculated Price", "Cancellation/ Rebook Fee" };
        Object[][] data = flightsList.stream().map(flight -> {
            LocalDate bookingDate = LocalDate.now(); // Assuming current date as booking date
            double calculatedPrice = flight.calculatePrice(bookingDate);
            return new Object[] {
                flight.getId(), flight.getFlightNumber(), flight.getOrigin(), flight.getDestination(),
                flight.getDepartureDate(), flight.getCapacity(), flight.getAvailableSeats(), flight.getPrice(),
                calculatedPrice, flight.getCancellationRebookFee()
            };
        }).toArray(Object[][]::new);

        JTable table = new JTable(data, columns);
        table.setRowHeight(30);
        table.setIntercellSpacing(new Dimension(10, 10));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setBackground(new Color(173, 216, 230));
        table.getTableHeader().setBackground(new Color(173, 216, 230));
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));

        table.getColumnModel().getColumn(0).setPreferredWidth(50);
        table.getColumnModel().getColumn(1).setPreferredWidth(150);
        table.getColumnModel().getColumn(2).setPreferredWidth(150);
        table.getColumnModel().getColumn(3).setPreferredWidth(150);
        table.getColumnModel().getColumn(4).setPreferredWidth(150);
        table.getColumnModel().getColumn(5).setPreferredWidth(100);
        table.getColumnModel().getColumn(6).setPreferredWidth(100);
        table.getColumnModel().getColumn(7).setPreferredWidth(100);
        table.getColumnModel().getColumn(8).setPreferredWidth(150);
        table.getColumnModel().getColumn(9).setPreferredWidth(150);

        table.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) {
                    try {
                        displayPassengersForFlight((int) table.getValueAt(selectedRow, 0));
                    } catch (FlightBookingSystemException ex) {
                        showError("Error fetching passengers");
                    }
                }
            }
        });

        updateContentPane(new JScrollPane(table));
    }

    /**
     * Displays the deleted flights.
     */
    private void displayDeletedFlights() {
        displayFlights(flight -> flight.getStatus() == 0);
    }

    /**
     * Displays the customers.
     */
    public void displayCustomers() {
        List<Customer> customersList = fbs.getCustomers().stream().filter(customer -> customer.getStatus() == 1)
                .collect(Collectors.toList());
        String[] columns = { "ID", "Name", "Email", "Phone", "Bookings" };
        Object[][] data = customersList.stream().map(customer -> new Object[] {
                customer.getId(), customer.getName(), customer.getEmail(), customer.getPhone(),
                customer.getBookings().size()
        }).toArray(Object[][]::new);

        JTable table = new JTable(data, columns);
        table.setRowHeight(30);
        table.setIntercellSpacing(new Dimension(10, 10));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setBackground(new Color(173, 216, 230));
        table.getTableHeader().setBackground(new Color(173, 216, 230));
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));

        table.getColumnModel().getColumn(0).setPreferredWidth(50);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        table.getColumnModel().getColumn(2).setPreferredWidth(250);
        table.getColumnModel().getColumn(3).setPreferredWidth(200);
        table.getColumnModel().getColumn(4).setPreferredWidth(100);

        table.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) {
                    try {
                        displayBookingDetails((int) table.getValueAt(selectedRow, 0));
                    } catch (FlightBookingSystemException ex) {
                        showError("Error fetching booking details");
                    }
                }
            }
        });

        updateContentPane(new JScrollPane(table));
    }

    /**
     * Displays the deleted customers.
     */
    private void displayDeletedCustomers() {
        List<Customer> customersList = fbs.getCustomers().stream().filter(customer -> customer.getStatus() == 0)
                .collect(Collectors.toList());
        String[] columns = { "ID", "Name", "Email", "Phone", "Bookings" };
        Object[][] data = customersList.stream().map(customer -> new Object[] {
                customer.getId(), customer.getName(), customer.getEmail(), customer.getPhone(),
                customer.getBookings().size()
        }).toArray(Object[][]::new);

        JTable table = new JTable(data, columns);
        table.setRowHeight(30);
        table.setIntercellSpacing(new Dimension(10, 10));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setBackground(new Color(173, 216, 230));
        table.getTableHeader().setBackground(new Color(173, 216, 230));
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));

        updateContentPane(new JScrollPane(table));
    }

    /**
     * Displays all flights.
     */
    public void displayAllFlights() {
        List<Flight> flightsList = fbs.getFlights().stream().filter(flight -> flight.getStatus() == 1)
                .collect(Collectors.toList());

        String[] columns = { "ID", "Flight No", "Origin", "Destination", "Departure Date", "Capacity",
                "Available Seats", "Price", "Cancellation/ Rebook Fee" };
        Object[][] data = flightsList.stream().map(flight -> new Object[] {
                flight.getId(), flight.getFlightNumber(), flight.getOrigin(), flight.getDestination(),
                flight.getDepartureDate(),
                flight.getCapacity(), flight.getAvailableSeats(), flight.getPrice(), flight.getCancellationRebookFee()
        }).toArray(Object[][]::new);

        JTable table = new JTable(data, columns);
        table.setRowHeight(30);
        table.setIntercellSpacing(new Dimension(10, 10));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setBackground(new Color(173, 216, 230));
        table.getTableHeader().setBackground(new Color(173, 216, 230));
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));

        table.getColumnModel().getColumn(0).setPreferredWidth(50);
        table.getColumnModel().getColumn(1).setPreferredWidth(150);
        table.getColumnModel().getColumn(2).setPreferredWidth(150);
        table.getColumnModel().getColumn(3).setPreferredWidth(150);
        table.getColumnModel().getColumn(4).setPreferredWidth(150);
        table.getColumnModel().getColumn(5).setPreferredWidth(100);
        table.getColumnModel().getColumn(6).setPreferredWidth(100);
        table.getColumnModel().getColumn(7).setPreferredWidth(100);
        table.getColumnModel().getColumn(8).setPreferredWidth(150);

        table.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) {
                    try {
                        displayPassengersForFlight((int) table.getValueAt(selectedRow, 0));
                    } catch (FlightBookingSystemException ex) {
                        showError("Error fetching passengers");
                    }
                }
            }
        });

        updateContentPane(new JScrollPane(table));
    }

    /**
     * Displays the passengers for the specified flight.
     * @param flightId The ID of the flight.
     * @throws FlightBookingSystemException If an error occurs while fetching the passengers.
     */
    public void displayPassengersForFlight(int flightId) throws FlightBookingSystemException {
        Flight flight = fbs.getFlightByID(flightId);
        List<Customer> passengers = flight.getPassengers();
        String[] columns = { "ID", "Name", "Email", "Phone" };
        Object[][] data = passengers.stream().map(passenger -> new Object[] {
                passenger.getId(), passenger.getName(), passenger.getEmail(), passenger.getPhone()
        }).toArray(Object[][]::new);

        JTable table = new JTable(data, columns);
        table.setRowHeight(30);
        table.setIntercellSpacing(new Dimension(10, 10));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setBackground(new Color(173, 216, 230));
        table.getTableHeader().setBackground(new Color(173, 216, 230));
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));

        table.getColumnModel().getColumn(0).setPreferredWidth(50);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        table.getColumnModel().getColumn(2).setPreferredWidth(250);
        table.getColumnModel().getColumn(3).setPreferredWidth(200);

        updateContentPane(new JScrollPane(table));
    }

    /**
     * Displays the booking details for the specified customer.
     * @param customerId The ID of the customer.
     * @throws FlightBookingSystemException If an error occurs while fetching the booking details.
     */
    public void displayBookingDetails(int customerId) throws FlightBookingSystemException {
        Customer customer = fbs.getCustomerByID(customerId);
        List<Booking> bookings = customer.getBookings();
        String[] columns = { "Flight No", "Origin", "Destination", "Departure Date" };
        Object[][] data = bookings.stream().map(booking -> new Object[] {
                booking.getFlight().getFlightNumber(), booking.getFlight().getOrigin(),
                booking.getFlight().getDestination(), booking.getFlight().getDepartureDate()
        }).toArray(Object[][]::new);

        JTable table = new JTable(data, columns);
        table.setRowHeight(30);
        table.setIntercellSpacing(new Dimension(10, 10));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setBackground(new Color(173, 216, 230));
        table.getTableHeader().setBackground(new Color(173, 216, 230));
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));

        table.getColumnModel().getColumn(0).setPreferredWidth(150);
        table.getColumnModel().getColumn(1).setPreferredWidth(150);
        table.getColumnModel().getColumn(2).setPreferredWidth(150);
        table.getColumnModel().getColumn(3).setPreferredWidth(150);

        updateContentPane(new JScrollPane(table));
    }

    /**
     * Updates the content pane with the specified component.
     * @param component The component to add to the content pane.
     */
    private void updateContentPane(JScrollPane component) {
        this.getContentPane().removeAll();
        this.getContentPane().add(component);
        this.revalidate();
    }

    /**
     * Displays an error message dialog.
     * @param message The error message to display.
     */
    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Returns the FlightBookingSystem object representing the flight booking system.
     * @return The FlightBookingSystem object.
     */
    public FlightBookingSystem getFlightBookingSystem() {
        return fbs;
    }

    /**
     * Refreshes the flights table by displaying the active flights.
     */
    public void refreshFlightsTable() {
        displayFlights(flight -> flight.getStatus() == 1);
    }

    /**
     * Refreshes the graphical user interface by resetting the content pane and displaying all flights.
     */
    public void refreshGUI() {
        this.getContentPane().removeAll();
        setupMenu();
        displayAllFlights();
        setupExitButton();
        this.revalidate();
        this.repaint();
    }

    /**
     * Prompts the user to enter a flight ID and displays the passengers for the selected flight.
     */
    private void showPassengersForSelectedFlight() {
        String flightIdStr = JOptionPane.showInputDialog(this, "Enter Flight ID:");
        if (flightIdStr != null) {
            try {
                int flightId = Integer.parseInt(flightIdStr);
                displayPassengersForFlight(flightId);
            } catch (NumberFormatException | FlightBookingSystemException ex) {
                showError("Invalid Flight ID or error fetching passengers.");
            }
        }
    }

    /**
     * Displays the bookings.
     */
    private void displayBookings() {
        List<Booking> bookingsList = fbs.getBookings();
        String[] columns = { "Booking ID", "Customer Name", "Flight Number" };
        Object[][] data = bookingsList.stream().map(booking -> new Object[] {
                booking.getId(), booking.getCustomer().getName(), booking.getFlight().getFlightNumber()
        }).toArray(Object[][]::new);

        JTable table = new JTable(data, columns);
        table.setRowHeight(30);
        table.setIntercellSpacing(new Dimension(10, 10));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setBackground(new Color(173, 216, 230));
        table.getTableHeader().setBackground(new Color(173, 216, 230));
        table.getTableHeader().setFont(new Font("Arial", Font.BOLD, 14));

        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        table.getColumnModel().getColumn(2).setPreferredWidth(150);

        updateContentPane(new JScrollPane(table));
    }
}
