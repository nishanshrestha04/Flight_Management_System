package bcu.cmp5332.bookingsystem.gui;

import bcu.cmp5332.bookingsystem.commands.AddCustomer;
import bcu.cmp5332.bookingsystem.commands.Command;
import bcu.cmp5332.bookingsystem.main.FlightBookingSystemException;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.regex.Pattern;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.BorderFactory;
import java.awt.Font;

/**
 * The AddCustomerWindow class provides a graphical user interface for adding a
 * new customer. It allows the user to enter the customer details and then add
 * the customer to the system. This class implements the ActionListener
 * interface to handle button clicks.
 *
 * @author Ashlesha Shrestha
 * @author Nishan Shrestha
 */
public class AddCustomerWindow extends JFrame implements ActionListener {

	private MainWindow mw;
	private JTextField customerIdText = new JTextField(); // Renamed variable
	private JTextField fullNameText = new JTextField();
	private JTextField phoneNumberText = new JTextField();
	private JTextField emailText = new JTextField();

	private JButton addBtn = new JButton("Add");
	private JButton cancelBtn = new JButton("Cancel");

	/**
	 * Constructs a new AddCustomerWindow object with a reference to the main
	 * window.
	 *
	 * @param mw The MainWindow object representing the main window of the
	 *           application.
	 */
	public AddCustomerWindow(MainWindow mw) {
		this.mw = mw;
		initialize();
	}

	/**
	 * Initializes the contents of the frame, setting up the layout and components.
	 */
	private void initialize() {

		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception ex) {
			// Handle exception if setting look and feel fails
		}

		setTitle("Add a New Customer");

		setSize(400, 250);
		JPanel topPanel = new JPanel();
		topPanel.setLayout(new GridLayout(5, 2, 10, 10));
		topPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		JLabel customerIdLabel = new JLabel("Customer ID ");
		customerIdLabel.setFont(new Font("Arial", Font.PLAIN, 14)); // Increase tooltip text size
		customerIdLabel.setToolTipText("Enter the Customer ID");
		topPanel.add(customerIdLabel);
		topPanel.add(customerIdText);
		JLabel fullNameLabel = new JLabel("Full Name ");
		fullNameLabel.setFont(new Font("Arial", Font.PLAIN, 14)); // Increase tooltip text size
		fullNameLabel.setToolTipText("Enter the Full Name");
		topPanel.add(fullNameLabel);
		topPanel.add(fullNameText);
		JLabel phoneNumberLabel = new JLabel("Phone Number ");
		phoneNumberLabel.setFont(new Font("Arial", Font.PLAIN, 14)); // Increase tooltip text size
		phoneNumberLabel.setToolTipText("Enter the Phone Number");
		topPanel.add(phoneNumberLabel);
		topPanel.add(phoneNumberText);
		JLabel emailLabel = new JLabel("Email ");
		emailLabel.setFont(new Font("Arial", Font.PLAIN, 14)); // Increase tooltip text size
		emailLabel.setToolTipText("Enter the Email");
		topPanel.add(emailLabel);
		topPanel.add(emailText);

		JPanel bottomPanel = new JPanel();
		bottomPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
		bottomPanel.add(addBtn);
		bottomPanel.add(cancelBtn);

		addBtn.addActionListener(this);
		cancelBtn.addActionListener(this);

		this.getContentPane().add(topPanel, BorderLayout.CENTER);
		this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
		setLocationRelativeTo(mw);

		setVisible(true);
	}

	/**
	 * Handles action events generated by buttons in the window.
	 *
	 * @param ae The ActionEvent object representing the action event.
	 */
	@Override
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == addBtn) {
			addCustomer();
		} else if (ae.getSource() == cancelBtn) {
			this.setVisible(false);
		}
	}

	/**
	 * Adds the customer based on the user input. Prompts for confirmation before
	 * adding the customer. Displays error messages if any error occurs during the
	 * addition process.
	 */
	private void addCustomer() {
		try {
			int customerId = Integer.parseInt(customerIdText.getText());
			String fullName = fullNameText.getText();
			String phoneNumber = phoneNumberText.getText();
			String email = emailText.getText();

			// Validate email format
			if (!isValidEmail(email)) {
				JOptionPane.showMessageDialog(this, "Invalid email format", "Error", JOptionPane.ERROR_MESSAGE);
				return;
			}

			// Create and execute the AddCustomer Command
			Command addCustomer = new AddCustomer(customerId, fullName, phoneNumber, email); // Updated variable
			addCustomer.execute(mw.getFlightBookingSystem());

			// Refresh the view with the list of customers
			mw.displayCustomers();

			// Refresh the GUI
			mw.refreshGUI();

			// Hide (close) the AddCustomerWindow
			this.setVisible(false);
		} catch (NumberFormatException nfe) {
			JOptionPane.showMessageDialog(this, "Customer ID must be a valid integer", "Error",
					JOptionPane.ERROR_MESSAGE);
		} catch (FlightBookingSystemException ex) {
			JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * Validates the email format using a regular expression.
	 *
	 * @param email The email to validate.
	 * @return true if the email format is valid, false otherwise.
	 */
	private boolean isValidEmail(String email) {
		String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
		Pattern pattern = Pattern.compile(emailRegex);
		return pattern.matcher(email).matches();
	}
}
